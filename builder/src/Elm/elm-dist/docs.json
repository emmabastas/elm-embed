[{"name":"Embed","comment":"\n\n@docs Task, map, andThen, succeed, fail\n\n","unions":[],"aliases":[{"name":"Task","comment":" Functions that create tasks are found in other modules. Two common tasks are:\n\n  - [Embed.Environment.string](/packages/emmabastas/elm-embed/latest/Embed-Environment#string)\n  - [Embed.File.read](/packages/emmabastas/elm-embed/latest/Embed-File#string)\n\nWhen tasks have been created they can be chained and further manipulated by the functions found here.\n\n","args":["a"],"type":"Embed.Internal.Task a"}],"values":[{"name":"andThen","comment":" Together with [succeed](#succeed) and [fail](#fail) you can use `andThen`\nto map a value in a way that can fail.\n\n    import Embed\n    import Embed.Environment\n    import String\n\n    portNumber : Embed.Task Int\n    portNumber =\n        Embed.andThen\n            (\\s ->\n                case String.toInt s of\n                    Just n ->\n                        Embed.succeed n\n\n                    Nothing ->\n                        Embed.fail \"Expected a number\"\n            )\n            (Embed.Environment.string \"port\")\n\n","type":"(a -> Embed.Task b) -> Embed.Task a -> Embed.Task b"},{"name":"fail","comment":" ","type":"String.String -> Embed.Task a"},{"name":"map","comment":" Map a value before embedding it.\n\n    import Embed\n    import Embed.Environment\n    import String\n\n    Embed.map String.toUpper (Embed.Environment.string \"foo\")\n\n","type":"(a -> b) -> Embed.Task a -> Embed.Task b"},{"name":"succeed","comment":" ","type":"a -> Embed.Task a"}],"binops":[]},{"name":"Embed.Environment","comment":"\n\n@docs string, maybeString\n\n","unions":[],"aliases":[],"values":[{"name":"maybeString","comment":" Like [`string`](#string), but returns `Nothing` if environment variable isn't set.\n","type":"String.String -> Embed.Task (Maybe.Maybe String.String)"},{"name":"string","comment":" Embed the contents of an environment variable. Fails if the environment\nisn't set.\n\n    string \"my_name\" -- \"Mark\"\n\n    string \"empty\" -- \"\"\n\n    string \"non_existent\" -- Error\n\n","type":"String.String -> Embed.Task String.String"}],"binops":[]},{"name":"Embed.File","comment":"\n\n@docs read\n\n","unions":[],"aliases":[],"values":[{"name":"read","comment":" Read the contents of a file on disk.\n\nThe path is read relative to the directory where elm.json is located.\n\n    read \"myMarkdown.md\"\n\n    read \"/home/user/myElmProject/myMarkdown.md\"\n\n","type":"String.String -> Embed.Task String.String"}],"binops":[]}]